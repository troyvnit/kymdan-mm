@{
    ViewBag.Title = "GeneralManagerPage";
}
<div id="UploadFileWindow"></div>
<div id="CommentWindow"></div>
<div class="row">&nbsp;</div>
<div class="row">
    <!-- Nav tabs -->
    <ul class="nav nav-tabs">
        <li class="active"><a href="#ReceiveAndAwaitingApprove" data-toggle="tab">Duyệt đề nghị cấp</a></li>
        <li><a href="#ApprovedAssigned" data-toggle="tab">Đã duyệt và phân công</a></li>
        <li><a href="#AssignedFinished" data-toggle="tab">Đã hoàn thành</a></li>
        <li><a href="#Temp" data-toggle="tab">Lưu tạm</a></li>
    </ul>

    <!-- Tab panes -->
    <div class="tab-content">
        <div class="tab-pane active" id="ReceiveAndAwaitingApprove">
            <div class="row">&nbsp;</div>
            <div id="ReceiveAndAwaitingApproveGrid"></div>
            <nav class="navbar navbar-default navbar-fixed-bottom" role="navigation">
                <div class="container">
                    <div class="col-sm-8">
                    </div>
                    <div class="col-sm-4">
                        <div class="pull-right">
                            <input type="button" id="approveMaterial" class="btn btn-success navbar-btn" value="Duyệt" />
                            <input type="button" id="approveAllMaterial" class="btn btn-warning navbar-btn" value="Duyệt tất cả" />
                        </div>
                    </div>
                </div>
            </nav>
        </div>
        <div class="tab-pane" id="ApprovedAssigned">
            <div class="row">&nbsp;</div>
            <div id="ApprovedAssignedGrid"></div>
        </div>
        <div class="tab-pane" id="AssignedFinished">
            <div class="row">&nbsp;</div>
            <div id="AssignedFinishedGrid"></div>
        </div>
        <div class="tab-pane" id="Temp">
            <div class="row">&nbsp;</div>
            <div id="TempGrid"></div>
        </div>
    </div>
</div>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script id="proposalCodeTemplate" type="text/x-kendo-tmpl">
        <a href="/chinh-sua-de-xuat/#= Id #" class="label label-primary">#= ProposalCode #</a>
    </script>
    <script id="approveStatusTemplate" type="text/x-kendo-tmpl">
        # if (Approved) { #
        <span class="label label-success">
            Đã duyệt
        </span>
        # } else {#
        <span class="label label-warning">
            Chưa duyệt
        </span>
        # } #
    </script>
    <script type="text/javascript">
    $(document).ready(function () {
        implementerDepartmentDataSource.read();
        implementerUserDataSource.read();
        progressStatusDataSource.read();
        //----------Tab 1-----------//
        var receiveAndAwaitingApproveDataSource = new kendo.data.DataSource({
            autoSync: true,
            transport: {
                read: {
                    url: "/Home/GetMaterials",
                    type: "post"
                },
                update: {
                    url: "/Home/AddOrUpdateMaterial",
                    type: "post"
                },
                destroy: {
                    url: "/Home/DeleteMaterial",
                    type: "post",
                },
                create: {
                    url: "/Home/AddOrUpdateMaterial",
                    type: "post"
                },
                parameterMap: function (options, operation) {
                    if (operation !== "read" && options.models) {
                        return {
                            materials: kendo.stringify(options.models)
                        };
                    } else {
                        return {
                            pageNumber: options.page,
                            pageSize: options.pageSize,
                            command: "ReceiveAndAwaitingApprove"
                        };
                    }
                }
            },
            batch: true,
            //pageSize: 10,
            //serverPaging: true,
            schema: {
                model: {
                    id: "Id",
                    fields: {
                        Id: { editable: false, nullable: false, defaultValue: 0 },
                        MaterialProposalCode: { editable: false, type: "string", validation: { required: true } },
                        MaterialName: { type: "string", validation: { required: true }, editable: false },
                        Description: { type: "string" },
                        Quantity: { type: "number", editable: false },
                        InventoryQuantity: { type: "number" },
                        Unit: { type: "string", validation: { required: true } },
                        Used: { type: "boolean" },
                        UsingPurpose: { type: "string" },
                        Deadline: { type: "date", format: "dd/MM/yyyy", validation: { required: true }, editable: false },
                        StartDate: { type: "date", format: "dd/MM/yyyy", validation: { required: true } },
                        ApproveDate: { type: "date", format: "dd/MM/yyyy", validation: { required: true } },
                        FinishDate: { type: "date", format: "dd/MM/yyyy", validation: { required: true } },
                        ProgressStatusId: { type: "number" },
                        Note: { type: "string" },
                        ProposerDepartmentId: { type: "number", editable: false },
                        ImplementerDepartmentId: { type: "number" },
                        ImplementerDepartmentIds: { type: "string" },
                        ImplementerUserName: { type: "string" },
                        LastProposalDeparmentComment: { type: "string", editable: false },
                        LastImplementDepartmentComment: { type: "string", editable: false },
                        LastGeneralManagerComment: { type: "string", editable: false },
                        ApproveStatus: { type: "number", editable: false },
                        Finished: { type: "boolean", editable: false }
                    }
                },
                total: "total",
                data: "data"
            }
        });

        $("#ReceiveAndAwaitingApproveGrid").kendoGrid({
            autoBind: window.location.hash == "",
            dataSource: receiveAndAwaitingApproveDataSource,
            navigatable: true,
            //pageable: true,
            sortable: true,
            reorderable: true,
            resizable: true,
            filterable: {
                extra: false,
                messages: {
                    info: "Lọc theo tiêu chí:", // sets the text on top of the filter menu
                    filter: "Lọc", // sets the text for the "Filter" button
                    clear: "Xóa lọc", // sets the text for the "Clear" button

                    // when filtering boolean numbers
                    isTrue: "đúng", // sets the text for "isTrue" radio button
                    isFalse: "sai", // sets the text for "isFalse" radio button

                    //changes the text of the "And" and "Or" of the filter menu
                    and: "Và",
                    or: "Hoặc"
                },
                operators: {
                    //filter menu for "string" type columns
                    string: {
                        contains: "Chứa",
                        startswith: "Bắt đầu với",
                        eq: "Bằng với",
                        neq: "Khác với",
                        endswith: "Kết thúc với"
                    },
                    //filter menu for "number" type columns
                    number: {
                        eq: "Bằng với",
                        neq: "Khác với",
                        gte: "Lớn hơn hoặc bằng",
                        gt: "Lớn hơn",
                        lte: "Nhỏ hơn hoặc bằng",
                        lt: "Nhỏ hơn"
                    },
                    //filter menu for "date" type columns
                    date: {
                        eq: "Đúng ngày",
                        neq: "Khác ngày",
                        gte: "Đúng hoặc sau ngày",
                        gt: "Sau ngày",
                        lte: "Đúng hoặc trước ngày",
                        lt: "Trước ngày"
                    },
                    //filter menu for foreign key values
                    enums: {
                        eq: "Bằng với",
                        neq: "Khác với"
                    }
                }
            },
            selectable: "multiple",
            groupable: {
                messages: {
                    empty: "Kéo thả tên cột vào đây để xem theo nhóm."
                }
            },
            //toolbar: [{ name: "create", text: "Thêm" }],
            columns: [
                { field: "MaterialProposalCode", title: "Mã đề xuất", template: "<a href='/chinh-sua-de-xuat/#= MaterialProposalId #' class='label label-primary'>#= MaterialProposalCode #</a>", width: 70 },
                {
                    field: "ProposerDepartmentId",
                    title: "Đơn vị đề nghị",
                    editor: implementerDepartmentEditor,
                    template: "#= getImplementerDepartmentName(ProposerDepartmentId) #",
                    groupHeaderTemplate: "Đơn vị đề nghị: #= getImplementerDepartmentName(value) #",
                    width: 100,
                    filterable: {
                        ui: proposerDepartmentIdReceiveAndAwaitingApproveGridFilter
                    }
                },
                { field: "MaterialName", template: "#= getMaterialName(Id, MaterialName, File) #", title: "Tên vật tư", width: 120 },
                { field: "Quantity", title: "SL", template: '<div style="text-align:right;">#= kendo.toString(Quantity, "n2") #</div>', width: 50 },
                { field: "Deadline", format: '{0:dd/MM/yyyy}', title: "Ngày đề nghị nhận", width: 80 },
                {
                    hidden: true, field: "ImplementerDepartmentId",
                    title: "Đơn vị thực hiện",
                    editor: implementerDepartmentEditor,
                    template: "#= getImplementerDepartmentName(ImplementerDepartmentId) #",
                    groupHeaderTemplate: "Đơn vị thực hiện: #= getImplementerDepartmentName(value) #",
                    width: 100,
                    filterable: {
                        ui: implementerDepartmentIdReceiveAndAwaitingApproveGridFilter
                    }
                },
                {
                    field: "ImplementerDepartmentIds",
                    title: "Đơn vị thực hiện",
                    editor: implementerDepartmentsEditor,
                    template: "#= getImplementerDepartmentNames(ImplementerDepartmentIds) #",
                    groupHeaderTemplate: "Đơn vị thực hiện: #= getImplementerDepartmentNames(value) #",
                    width: 100,
                    filterable: {
                        ui: implementerDepartmentIdsReceiveAndAwaitingApproveGridFilter
                    }
                },
                { field: "LastProposalDeparmentComment", template: "<p class='#= LastProposalDeparmentCommentReadClass #'>#= LastProposalDeparmentComment #</p>", title: "Đơn vị đề xuất phản hồi", width: 100 },
                { field: "LastGeneralManagerComment", template: "<p class='#= LastGeneralManagerCommentReadClass #'>#= LastGeneralManagerComment #</p>", title: "Chỉ đạo của TGĐ", width: 100 },
                { command: [{ text: "Phản hồi", click: showComment }, { name: "destroy", text: "Xóa" }], title: " ", width: "110px" }
            ],
            editable: {
                confirmation: "Bạn có chắc muốn xóa ?"
            },
            dataBound: function () {
                var dataView = this.dataSource.view();
                for (var i = 0; i < dataView.length; i++) {
                    if (kendo.parseDate(dataView[i].Deadline, "dd/MM/yyyy") <= new Date()) {
                        $("#ReceiveAndAwaitingApproveGrid tbody").find("tr[data-uid=" + dataView[i].uid + "]").addClass("btn-danger active");
                    } else if (kendo.parseDate(dataView[i].Deadline, "dd/MM/yyyy") <= new Date().addDays(3)) {
                        $("#ReceiveAndAwaitingApproveGrid tbody").find("tr[data-uid=" + dataView[i].uid + "]").addClass("btn-warning active");
                    }
                }
                exportGridToExcel('ReceiveAndAwaitingApprove');
            },
            filterMenuInit: function (e) {
                if (e.field == "ImplementerDepartmentId" || e.field == "ImplementerDepartmentIds" || e.field == "ProposerDepartmentId" || e.field == "ImplementerUserName" || e.field == "ImplementerUserNames" || e.field == "ProgressStatusId") {
                    var firstValueDropDown = e.container.find("select:eq(0)").data("kendoDropDownList");
                    e.container.find(".k-filter-help-text").hide();
                    setTimeout(function () {
                        firstValueDropDown.wrapper.hide();
                    });
                }
            }
        });

        //----------Tab 2-----------//
        var approvedAssignedDataSource = new kendo.data.DataSource({
            transport: {
                read: {
                    url: "/Home/GetMaterials",
                    type: "post"
                },
                update: {
                    url: "/Home/AddOrUpdateMaterial",
                    type: "post"
                },
                destroy: {
                    url: "/Home/DeleteMaterial",
                    type: "post",
                },
                create: {
                    url: "/Home/AddOrUpdateMaterial",
                    type: "post"
                },
                parameterMap: function (options, operation) {
                    if (operation !== "read" && options.models) {
                        return {
                            materials: kendo.stringify(options.models)
                        };
                    } else {
                        return {
                            pageNumber: options.page,
                            pageSize: options.pageSize,
                            command: "ApprovedAssigned"
                        };
                    }
                }
            },
            batch: true,
            //pageSize: 10,
            //serverPaging: true,
            schema: {
                model: {
                    id: "Id",
                    fields: {
                        Id: { editable: false, nullable: false, defaultValue: 0 },
                        MaterialProposalCode: { editable: false, type: "string", validation: { required: true } },
                        MaterialName: { editable: false, type: "string", validation: { required: true } },
                        Description: { editable: false, type: "string" },
                        Quantity: { editable: false, type: "number" },
                        InventoryQuantity: { editable: false, type: "number" },
                        Unit: { editable: false, type: "string", validation: { required: true } },
                        Used: { editable: false, type: "boolean" },
                        UsingPurpose: { editable: false, type: "string" },
                        Deadline: { editable: false, type: "date", format: "dd/MM/yyyy", validation: { required: true } },
                        StartDate: { type: "date", format: "dd/MM/yyyy" },
                        ApproveDate: { editable: false, type: "date", format: "dd/MM/yyyy", validation: { required: true } },
                        FinishDate: { type: "date", format: "dd/MM/yyyy" },
                        DeliveryDate: { editable: false, type: "date", format: "dd/MM/yyyy", validation: { required: true } },
                        ProgressStatusId: { editable: false, type: "number" },
                        Note: { editable: false, type: "string" },
                        ProposerDepartmentId: { type: "number", editable: false },
                        ImplementerDepartmentId: { type: "number" },
                        ImplementerDepartmentIds: { type: "string" },
                        ImplementerUserName: { type: "string" },
                        ImplementerUserNames: { type: "string" },
                        LastProposalDeparmentComment: { type: "string", editable: false },
                        LastImplementDepartmentComment: { type: "string", editable: false },
                        LastGeneralManagerComment: { type: "string", editable: false },
                        ApproveStatus: { type: "number", editable: false },
                        Finished: { type: "boolean", editable: false }
                    }
                },
                total: "total",
                data: "data"
            }
        });

        $("#ApprovedAssignedGrid").kendoGrid({
            autoBind: false,
            dataSource: approvedAssignedDataSource,
            navigatable: true,
            //pageable: true,
            sortable: true,
            reorderable: true,
            resizable: true,
            filterable: {
                extra: false,
                messages: {
                    info: "Lọc theo tiêu chí:", // sets the text on top of the filter menu
                    filter: "Lọc", // sets the text for the "Filter" button
                    clear: "Xóa lọc", // sets the text for the "Clear" button

                    // when filtering boolean numbers
                    isTrue: "đúng", // sets the text for "isTrue" radio button
                    isFalse: "sai", // sets the text for "isFalse" radio button

                    //changes the text of the "And" and "Or" of the filter menu
                    and: "Và",
                    or: "Hoặc"
                },
                operators: {
                    //filter menu for "string" type columns
                    string: {
                        contains: "Chứa",
                        startswith: "Bắt đầu với",
                        eq: "Bằng với",
                        neq: "Khác với",
                        endswith: "Kết thúc với"
                    },
                    //filter menu for "number" type columns
                    number: {
                        eq: "Bằng với",
                        neq: "Khác với",
                        gte: "Lớn hơn hoặc bằng",
                        gt: "Lớn hơn",
                        lte: "Nhỏ hơn hoặc bằng",
                        lt: "Nhỏ hơn"
                    },
                    //filter menu for "date" type columns
                    date: {
                        eq: "Đúng ngày",
                        neq: "Khác ngày",
                        gte: "Đúng hoặc sau ngày",
                        gt: "Sau ngày",
                        lte: "Đúng hoặc trước ngày",
                        lt: "Trước ngày"
                    },
                    //filter menu for foreign key values
                    enums: {
                        eq: "Bằng với",
                        neq: "Khác với"
                    }
                }
            },
            groupable: {
                messages: {
                    empty: "Kéo thả tên cột vào đây để xem theo nhóm."
                }
            },
            toolbar: [{ name: "save", text: "Lưu" }, { name: "cancel", text: "Hủy" }],
            columns: [
                { field: "MaterialProposalCode", title: "Mã đề xuất", template: "<a href='/chinh-sua-de-xuat/#= MaterialProposalId #' class='label label-primary'>#= MaterialProposalCode #</a>", width: 70 },
                { field: "MaterialName", template: "#= getMaterialName(Id, MaterialName, File) #", title: "Tên vật tư", width: 120 },
                { field: "Description", title: "Mô tả", editor: textareaEditor, width: 100 },
                {
                    field: "ProposerDepartmentId",
                    title: "ĐV đề nghị",
                    editor: implementerDepartmentEditor,
                    template: "#= getImplementerDepartmentName(ProposerDepartmentId) #",
                    groupHeaderTemplate: "Đơn vị đề nghị: #= getImplementerDepartmentName(value) #",
                    width: 60,
                    filterable: {
                        ui: proposerDepartmentIdApprovedAssignedGridFilter
                    }
                },
                {
                    hidden: true, field: "ImplementerDepartmentId",
                    title: "ĐV thực hiện",
                    editor: implementerDepartmentEditor,
                    template: "#= getImplementerDepartmentName(ImplementerDepartmentId) #",
                    groupHeaderTemplate: "Đơn vị thực hiện: #= getImplementerDepartmentName(value) #",
                    width: 60,
                    filterable: {
                        ui: implementerDepartmentIdApprovedAssignedGridFilter
                    }
                },
                {
                    field: "ImplementerDepartmentIds", title: "ĐV thực hiện", editor: implementerDepartmentsEditor, template: "#= getImplementerDepartmentNames(ImplementerDepartmentIds) #", groupHeaderTemplate: "Đơn vị thực hiện: #= getImplementerDepartmentNames(value) #", width: 60,
                    filterable: {
                        ui: implementerDepartmentIdsApprovedAssignedGridFilter
                    }
                },
                {
                    hidden: true, field: "ImplementerUserName",
                    title: "Người thực hiện",
                    editor: implementerUserEditor,
                    template: "#= getImplementerDisplayName(ImplementerUserName) #",
                    groupHeaderTemplate: "Người thực hiện: #= getImplementerDisplayName(value) #",
                    width: 120,
                    filterable: {
                        ui: implementerUserNameApprovedAssignedGridFilter
                    }
                },
                {
                    field: "ImplementerUserNames", title: "Người thực hiện", editor: implementerUsersEditor, template: "#= getImplementerDisplayNames(ImplementerUserNames) #", groupHeaderTemplate: "Người thực hiện: #= getImplementerDisplayNames(value) #", width: 100,
                    filterable: {
                        ui: implementerUserNamesApprovedAssignedGridFilter
                    }
                },
                { field: "StartDate", format: '{0:dd/MM/yyyy}', title: "Ngày triển khai", width: 85 },
                { field: "FinishDate", format: '{0:dd/MM/yyyy}', title: "Thời hạn hoàn thành", width: 85 },
                {
                    field: "ProgressStatusId",
                    title: "Trạng thái tiến độ",
                    editor: progressStatusEditor,
                    template: "#= getProgressStatus(ProgressStatusId) #",
                    groupHeaderTemplate: "Trạng thái tiến độ: #= getProgressStatus(value) #",
                    width: 100,
                    filterable: {
                        ui: progressStatusIdApprovedAssignedGridFilter
                    }
                },
                { field: "LastProposalDeparmentComment", template: "<p class='#= LastProposalDeparmentCommentReadClass #'>#= LastProposalDeparmentComment #</p>", title: "Đơn vị đề xuất phản hồi", width: 100 },
                { field: "LastImplementDepartmentComment", template: "<p class='#= LastImplementDepartmentCommentReadClass #'>#= LastImplementDepartmentComment #</p>", title: "Đơn vị thực hiện phản hồi", width: 100 },
                { field: "LastGeneralManagerComment", template: "<p class='#= LastGeneralManagerCommentReadClass #'>#= LastGeneralManagerComment #</p>", title: "Chỉ đạo của TGĐ", width: 100 },
                { command: [{ text: "Phản hồi", click: showComment }, { name: "destroy", text: "Xóa" }], title: " ", width: "110px" }
            ],
            editable: {
                confirmation: "Bạn có chắc muốn xóa ? Lưu ý: Bấm lưu để hoàn tất thao tác!"
            },
            dataBound: function () {
                var dataView = this.dataSource.view();
                for (var i = 0; i < dataView.length; i++) {
                    if (dataView[i].ImplementerUserName != "") {
                        if (kendo.parseDate(dataView[i].FinishDate, "dd/MM/yyyy") <= new Date()) {
                            $("#ApprovedAssignedGrid tbody").find("tr[data-uid=" + dataView[i].uid + "]").addClass("btn-danger active");
                        } else if (kendo.parseDate(dataView[i].FinishDate, "dd/MM/yyyy") <= new Date().addDays(3)) {
                            $("#ApprovedAssignedGrid tbody").find("tr[data-uid=" + dataView[i].uid + "]").addClass("btn-warning active");
                        } else {

                        }
                    } else {
                        $("#ApprovedAssignedGrid tbody").find("tr[data-uid=" + dataView[i].uid + "]").addClass("btn-primary active");
                    }
                }
                exportGridToExcel('ApprovedAssigned');
            },
            filterMenuInit: function (e) {
                if (e.field == "ImplementerDepartmentId" || e.field == "ImplementerDepartmentIds" || e.field == "ProposerDepartmentId" || e.field == "ImplementerUserName" || e.field == "ImplementerUserNames" || e.field == "ProgressStatusId") {
                    var firstValueDropDown = e.container.find("select:eq(0)").data("kendoDropDownList");
                    e.container.find(".k-filter-help-text").hide();
                    setTimeout(function () {
                        firstValueDropDown.wrapper.hide();
                    });
                }
            }
        });

        //----------Tab 3-----------//
        var finishedDataSource = new kendo.data.DataSource({
            autoSync: true,
            transport: {
                read: {
                    url: "/Home/GetMaterials",
                    type: "post"
                },
                update: {
                    url: "/Home/AddOrUpdateMaterial",
                    type: "post"
                },
                destroy: {
                    url: "/Home/DeleteMaterial",
                    type: "post",
                },
                create: {
                    url: "/Home/AddOrUpdateMaterial",
                    type: "post"
                },
                parameterMap: function (options, operation) {
                    if (operation !== "read" && options.models) {
                        return {
                            materials: kendo.stringify(options.models)
                        };
                    } else {
                        return {
                            pageNumber: options.page,
                            pageSize: options.pageSize,
                            command: "AssignedFinished"
                        };
                    }
                }
            },
            batch: true,
            //pageSize: 10,
            //serverPaging: true,
            schema: {
                model: {
                    id: "Id",
                    fields: {
                        Id: { editable: false, nullable: false, defaultValue: 0 },
                        MaterialProposalCode: { editable: false, type: "string", validation: { required: true } },
                        MaterialName: { type: "string", validation: { required: true }, editable: false },
                        Description: { type: "string", editable: false },
                        Quantity: { type: "number", editable: false },
                        InventoryQuantity: { type: "number", editable: false },
                        Unit: { type: "string", validation: { required: true }, editable: false },
                        Used: { type: "boolean", editable: false },
                        UsingPurpose: { type: "string", editable: false },
                        Deadline: { type: "date", format: "dd/MM/yyyy", validation: { required: true }, editable: false },
                        StartDate: { type: "date", format: "dd/MM/yyyy", validation: { required: true }, editable: false },
                        ApproveDate: { type: "date", format: "dd/MM/yyyy", validation: { required: true }, editable: false },
                        FinishDate: { editable: false, type: "date", format: "dd/MM/yyyy", validation: { required: true } },
                        DeliveryDate: { editable: false, type: "date", format: "dd/MM/yyyy", validation: { required: true } },
                        ProgressStatusId: { type: "number", editable: false },
                        Note: { type: "string" },
                        ProposerDepartmentId: { type: "number", editable: false },
                        ImplementerDepartmentId: { type: "number", editable: false },
                        ImplementerDepartmentIds: { type: "string", editable: false },
                        ImplementerUserName: { type: "string", editable: false },
                        ImplementerUserNames: { type: "string", editable: false },
                        LastProposalDeparmentComment: { type: "string", editable: false },
                        LastImplementDepartmentComment: { type: "string", editable: false },
                        LastGeneralManagerComment: { type: "string", editable: false },
                        ApproveStatus: { type: "number", editable: false },
                        Finished: { type: "boolean", editable: false }
                    }
                },
                total: "total",
                data: "data"
            }
        });

        $("#AssignedFinishedGrid").kendoGrid({
            autoBind: false,
            dataSource: finishedDataSource,
            navigatable: true,
            //pageable: true,
            sortable: true,
            reorderable: true,
            resizable: true,
            filterable: {
                extra: false,
                messages: {
                    info: "Lọc theo tiêu chí:", // sets the text on top of the filter menu
                    filter: "Lọc", // sets the text for the "Filter" button
                    clear: "Xóa lọc", // sets the text for the "Clear" button

                    // when filtering boolean numbers
                    isTrue: "đúng", // sets the text for "isTrue" radio button
                    isFalse: "sai", // sets the text for "isFalse" radio button

                    //changes the text of the "And" and "Or" of the filter menu
                    and: "Và",
                    or: "Hoặc"
                },
                operators: {
                    //filter menu for "string" type columns
                    string: {
                        contains: "Chứa",
                        startswith: "Bắt đầu với",
                        eq: "Bằng với",
                        neq: "Khác với",
                        endswith: "Kết thúc với"
                    },
                    //filter menu for "number" type columns
                    number: {
                        eq: "Bằng với",
                        neq: "Khác với",
                        gte: "Lớn hơn hoặc bằng",
                        gt: "Lớn hơn",
                        lte: "Nhỏ hơn hoặc bằng",
                        lt: "Nhỏ hơn"
                    },
                    //filter menu for "date" type columns
                    date: {
                        eq: "Đúng ngày",
                        neq: "Khác ngày",
                        gte: "Đúng hoặc sau ngày",
                        gt: "Sau ngày",
                        lte: "Đúng hoặc trước ngày",
                        lt: "Trước ngày"
                    },
                    //filter menu for foreign key values
                    enums: {
                        eq: "Bằng với",
                        neq: "Khác với"
                    }
                }
            },
            groupable: {
                messages: {
                    empty: "Kéo thả tên cột vào đây để xem theo nhóm."
                }
            },
            //toolbar: [{ name: "create", text: "Thêm" }],
            columns: [
                { field: "MaterialProposalCode", title: "Mã đề xuất", template: "<a href='/chinh-sua-de-xuat/#= MaterialProposalId #' class='label label-primary'>#= MaterialProposalCode #</a>", width: 70 },
                { field: "MaterialName", template: "#= getMaterialName(Id, MaterialName, File) #", title: "Tên vật tư", width: 120 },
                { field: "Description", title: "Mô tả", editor: textareaEditor, width: 100 },
                {
                    hidden: true, field: "ImplementerDepartmentId",
                    title: "ĐV thực hiện",
                    editor: implementerDepartmentEditor,
                    template: "#= getImplementerDepartmentName(ImplementerDepartmentId) #",
                    groupHeaderTemplate: "Đơn vị thực hiện: #= getImplementerDepartmentName(value) #",
                    width: 50,
                    filterable: {
                        ui: implementerDepartmentIdAssignedFinishedGridFilter
                    }
                },
                {
                    field: "ImplementerDepartmentIds", title: "ĐV thực hiện", editor: implementerDepartmentsEditor, template: "#= getImplementerDepartmentNames(ImplementerDepartmentIds) #", groupHeaderTemplate: "Đơn vị thực hiện: #= getImplementerDepartmentNames(value) #", width: 50,
                    filterable: {
                        ui: implementerDepartmentIdsAssignedFinishedGridFilter
                    }
                },
                {
                    field: "ProposerDepartmentId",
                    title: "ĐV đề nghị",
                    editor: implementerDepartmentEditor,
                    template: "#= getImplementerDepartmentName(ProposerDepartmentId) #",
                    groupHeaderTemplate: "Đơn vị đề nghị: #= getImplementerDepartmentName(value) #",
                    width: 50,
                    filterable: {
                        ui: proposerDepartmentIdAssignedFinishedGridFilter
                    }
                },
                {
                    hidden: true, field: "ImplementerUserName",
                    title: "Người thực hiện",
                    editor: implementerUserEditor,
                    template: "#= getImplementerDisplayName(ImplementerUserName) #",
                    groupHeaderTemplate: "Người thực hiện: #= getImplementerDisplayName(value) #",
                    width: 120,
                    filterable: {
                        ui: implementerUserNameAssignedFinishedGridFilter
                    }
                },
                {
                    field: "ImplementerUserNames", title: "Người thực hiện", editor: implementerUsersEditor, template: "#= getImplementerDisplayNames(ImplementerUserNames) #", groupHeaderTemplate: "Người thực hiện: #= getImplementerDisplayNames(value) #", width: 100,
                    filterable: {
                        ui: implementerUserNamesAssignedFinishedGridFilter
                    }
                },
                { field: "StartDate", format: '{0:dd/MM/yyyy}', title: "Ngày triển khai", width: 70 },
                { field: "FinishDate", format: '{0:dd/MM/yyyy}', title: "Thời hạn hoàn thành", width: 70 },
                {
                    field: "ProgressStatusId",
                    title: "Trạng thái tiến độ",
                    editor: progressStatusEditor,
                    template: "#= getProgressStatus(ProgressStatusId) #",
                    groupHeaderTemplate: "Trạng thái tiến độ: #= getProgressStatus(value) #",
                    width: 100,
                    filterable: {
                        ui: progressStatusIdAssignedFinishedGridFilter
                    }
                },
                { field: "LastProposalDeparmentComment", template: "<p class='#= LastProposalDeparmentCommentReadClass #'>#= LastProposalDeparmentComment #</p>", title: "Đơn vị đề xuất phản hồi", width: 100 },
                { field: "LastImplementDepartmentComment", template: "<p class='#= LastImplementDepartmentCommentReadClass #'>#= LastImplementDepartmentComment #</p>", title: "Đơn vị thực hiện phản hồi", width: 100 },
                { field: "LastGeneralManagerComment", template: "<p class='#= LastGeneralManagerCommentReadClass #'>#= LastGeneralManagerComment #</p>", title: "Chỉ đạo của TGĐ", width: 100 },
                { command: [{ text: "Phản hồi", click: showComment }, { name: "destroy", text: "Xóa" }], title: " ", width: "110px" }
            ],
            editable: {
                confirmation: "Bạn có chắc muốn xóa ?"
            },
            filterMenuInit: function (e) {
                if (e.field == "ImplementerDepartmentId" || e.field == "ImplementerDepartmentIds" || e.field == "ProposerDepartmentId" || e.field == "ImplementerUserName" || e.field == "ImplementerUserNames" || e.field == "ProgressStatusId") {
                    var firstValueDropDown = e.container.find("select:eq(0)").data("kendoDropDownList");
                    e.container.find(".k-filter-help-text").hide();
                    setTimeout(function () {
                        firstValueDropDown.wrapper.hide();
                    });
                }
            },
            dataBound: function () {
                exportGridToExcel('AssignedFinished');
            }
        });

        //----------Tab 4-----------//
        var tempDataSource = new kendo.data.DataSource({
            autoSync: true,
            transport: {
                read: {
                    url: "/Home/GetMaterialProposals",
                    type: "post"
                },
                update: {
                    url: "/Home/AddOrUpdateMaterialProposal",
                    type: "post"
                },
                destroy: {
                    url: "/Home/DeleteMaterialProposal",
                    type: "post",
                },
                create: {
                    url: "/Home/AddOrUpdateMaterialProposal",
                    type: "post"
                },
                parameterMap: function (options, operation) {
                    if (operation !== "read" && options.models) {
                        return {
                            materialProposals: kendo.stringify(options.models),
                            materialProposalId: $("#Id").val()
                        };
                    } else {
                        return {
                            pageNumber: options.page,
                            pageSize: options.pageSize,
                            command: "Temp"
                        };
                    }
                }
            },
            batch: true,
            //pageSize: 10,
            //serverPaging: true,
            schema: {
                model: {
                    id: "Id",
                    fields: {
                        Id: { editable: false, nullable: false, defaultValue: 0 },
                        ProposalCode: { editable: false, type: "string", validation: { required: true } },
                        CreatedDate: { editable: false, type: "date", format: "dd/MM/yyyy", validation: { required: true } },
                        Approved: { editable: false, type: "boolean" }
                    }
                },
                total: "total",
                data: "data"
            }
        });

        $("#TempGrid").kendoGrid({
            autoBind: false,
            dataSource: tempDataSource,
            navigatable: true,
            //pageable: true,
            sortable: true,
            reorderable: true,
            resizable: true,
            filterable: {
                extra: false,
                messages: {
                    info: "Lọc theo tiêu chí:", // sets the text on top of the filter menu
                    filter: "Lọc", // sets the text for the "Filter" button
                    clear: "Xóa lọc", // sets the text for the "Clear" button

                    // when filtering boolean numbers
                    isTrue: "đúng", // sets the text for "isTrue" radio button
                    isFalse: "sai", // sets the text for "isFalse" radio button

                    //changes the text of the "And" and "Or" of the filter menu
                    and: "Và",
                    or: "Hoặc"
                },
                operators: {
                    //filter menu for "string" type columns
                    string: {
                        contains: "Chứa",
                        startswith: "Bắt đầu với",
                        eq: "Bằng với",
                        neq: "Khác với",
                        endswith: "Kết thúc với"
                    },
                    //filter menu for "number" type columns
                    number: {
                        eq: "Bằng với",
                        neq: "Khác với",
                        gte: "Lớn hơn hoặc bằng",
                        gt: "Lớn hơn",
                        lte: "Nhỏ hơn hoặc bằng",
                        lt: "Nhỏ hơn"
                    },
                    //filter menu for "date" type columns
                    date: {
                        eq: "Đúng ngày",
                        neq: "Khác ngày",
                        gte: "Đúng hoặc sau ngày",
                        gt: "Sau ngày",
                        lte: "Đúng hoặc trước ngày",
                        lt: "Trước ngày"
                    },
                    //filter menu for foreign key values
                    enums: {
                        eq: "Bằng với",
                        neq: "Khác với"
                    }
                }
            },
            groupable: {
                messages: {
                    empty: "Kéo thả tên cột vào đây để xem theo nhóm."
                }
            },
            //toolbar: [{ name: "create", text: "Thêm" }],
            columns: [
                { field: "ProposalCode", title: "Mã đề xuất", template: "<a href='/chinh-sua-de-xuat/#= Id #' class='label label-primary'>#= ProposalCode #</a>" },
                { field: "CreatedDate", format: '{0:dd/MM/yyyy}', title: "Ngày lập bảng" },
                { field: "Approved", title: "Duyệt", template: $("#approveStatusTemplate").html() },
                { command: [{ name: "destroy", title: "&nbsp;", text: "Xóa", width: 90 }] }
            ],
            editable: {
                confirmation: "Bạn có chắc muốn xóa ?"
            },
            filterMenuInit: function (e) {
                if (e.field == "ImplementerDepartmentId" || e.field == "ImplementerDepartmentIds" || e.field == "ProposerDepartmentId" || e.field == "ImplementerUserName" || e.field == "ImplementerUserNames" || e.field == "ProgressStatusId") {
                    var firstValueDropDown = e.container.find("select:eq(0)").data("kendoDropDownList");
                    e.container.find(".k-filter-help-text").hide();
                    setTimeout(function () {
                        firstValueDropDown.wrapper.hide();
                    });
                }
            }
        });

        $("#approveMaterial").on("click", function () {
            approveMaterial();
        });

        $("#approveAllMaterial").on("click", function () {
            $("#ReceiveAndAwaitingApproveGrid").data("kendoGrid").select($("#ReceiveAndAwaitingApproveGrid").data("kendoGrid").tbody.find(">tr"));
            approveMaterial();
        });

        function approveMaterial() {
            var ids = [];
            var grid = $("#ReceiveAndAwaitingApproveGrid").data("kendoGrid");
            grid.select().each(function () {
                var dataItem = grid.dataItem($(this));
                if (dataItem.ImplementerDepartmentIds) {
                    ids.push(dataItem.Id);
                } 
            });
            if (ids.length > 0) {
                $.ajax({
                    url: '@Url.Action("ApproveMaterial", "Home")',
                        type: "POST",
                        data: { idString: ids.join(',') },
                        dataType: "json",
                        async: false,
                        success: function(result) {
                            if (result) {
                                $("#ReceiveAndAwaitingApproveGrid").data("kendoGrid").dataSource.read();
                            }
                        }
                    });
                }
            }

            $('a[data-toggle="tab"]').on('shown.bs.tab', function(e) {
                $(e.target.hash + "Grid").data("kendoGrid").dataSource.read();
            });
            var hash = window.location.hash;
            $('ul.nav a[href="' + hash + '"]').parent().removeClass("active");
            hash && $('ul.nav a[href="' + hash + '"]').tab('show');
        });
        Date.prototype.addDays = function(days) {
            this.setDate(this.getDate() + days);
            return this;
        };
        var textareaEditor = function(container, options) {
            $('<textarea class="k-input k-textbox" data-bind="value:' + options.field + '" />')
                .appendTo(container);
        };

        function getImplementerDepartmentName(id) {
            var departmentName = "";
            $.each(implementerDepartmentDataSource._data, function() {
                if (this.Id == id) {
                    departmentName = this.DepartmentName;
                }
            });
            return departmentName;
        }

        var implementerDepartmentDataSource = new kendo.data.DataSource({
            transport: {
                read: {
                    url: "/Home/GetDepartment",
                    type: "post"
                }
            }
        });

        function implementerDepartmentEditor(container, options) {
            var model = options.model;
            $('<input data-bind="value:' + options.field + '"/>')
                .appendTo(container)
                .kendoDropDownList({
                    dataTextField: "DepartmentName",
                    dataValueField: "Id",
                    optionLabel: {
                        DepartmentName: "-Chọn-",
                        Id: 0
                    },
                    dataSource: implementerDepartmentDataSource,
                    change: function(e) {
                        model.set("ImplementerUserName", "");
                        model.set("StartDate", null);
                        model.set("FinishDate", null);
                    }
                });
        }

        function getImplementerDepartments(ids) {
            var departments = [];
            $.each(ids.split(','), function () {
                var departmentName = "";
                var id = this;
                $.each(implementerDepartmentDataSource._data, function () {
                    if (this.Id == id) {
                        departmentName = this.DepartmentName;
                    }
                });
                departments.push({ id: id, departmentName: departmentName });
            });
            return departments;
        }

        function getImplementerDepartmentNames(ids) {
            var departmentNames = [];
            $.each(ids.split(','), function() {
                var departmentName = "";
                var id = this;
                $.each(implementerDepartmentDataSource._data, function() {
                    if (this.Id == id) {
                        departmentName = this.DepartmentName;
                    }
                });
                departmentNames.push(departmentName);
            });
            return departmentNames.join(', ');
        }

        function implementerDepartmentsEditor(container, options) {
            var model = options.model;
            $('<input data-bind="value:' + options.field + '"/>')
                .appendTo(container)
                .kendoMultiSelect({
                    dataTextField: "DepartmentName",
                    dataValueField: "Id",
                    optionLabel: {
                        DepartmentName: "-Chọn-",
                        Id: 0
                    },
                    dataSource: implementerDepartmentDataSource,
                    open: function() {
                        this.value(model.ImplementerDepartmentIds.split(','));
                    },
                    change: function(e) {
                        model.set("ImplementerUserNames", "");
                        model.set("StartDate", null);
                        model.set("FinishDate", null);
                        model.set("ImplementerDepartmentIds", this.value());
                    }
                });
        }

        function getImplementerDisplayName(userName) {
            var displayName = "";
            $.each(implementerUserDataSource._data, function() {
                if (this.UserName == userName) {
                    displayName = this.DisplayName;
                }
            });
            return displayName;
        }

        var implementerUserDataSource = new kendo.data.DataSource({
            transport: {
                read: {
                    url: "/Home/GetAllUser",
                    type: "post"
                }
            }
        });

        function implementerUserEditor(container, options) {
            $('<input data-bind="value:' + options.field + '"/>')
                .appendTo(container)
                .kendoDropDownList({
                    dataTextField: "DisplayName",
                    dataValueField: "UserName",
                    optionLabel: "-Chọn-",
                    dataSource: {
                        transport: {
                            read: {
                                url: "/Home/GetUser?departmentIds=" + options.model.ImplementerDepartmentIds,
                                type: "post"
                            }
                        }
                    }
                });
        }

        function getImplementerUsers(userNames) {
            var users = [];
            $.each(userNames.split(','), function () {
                var displayName = "";
                var userName = this;
                $.each(implementerUserDataSource._data, function () {
                    if (this.UserName == userName) {
                        displayName = this.DisplayName;
                    }
                });
                users.push({ userName: userName, displayName: displayName });
            });
            return users;
        }

        function getImplementerDisplayNames(userNames) {
            var displayNames = [];
            $.each(userNames.split(','), function () {
                var displayName = "";
                var userName = this;
                $.each(implementerUserDataSource._data, function () {
                    if (this.UserName == userName) {
                        displayName = this.DisplayName;
                    }
                });
                displayNames.push(displayName);
            });
            return displayNames.join(', ');
        }

        function implementerUsersEditor(container, options) {
            $('<input data-bind="value:' + options.field + '"/>')
                .appendTo(container)
                .kendoMultiSelect({
                    autoBind: true,
                    dataTextField: "DisplayName",
                    dataValueField: "UserName",
                    optionLabel: "-Chọn-",
                    dataSource: {
                        transport: {
                            read: {
                                url: "/Home/GetUser?departmentIds=" + options.model.ImplementerDepartmentIds,
                                type: "post"
                            }
                        }
                    },
                    open: function () {
                        this.value(options.model.ImplementerUserNames.split(','));
                    },
                    change: function (e) {
                        options.model.set("ImplementerUserNames", this.value());
                    }
                });
        }

        function getProgressStatus(id) {
            var status = "";
            $.each(progressStatusDataSource._data, function() {
                if (this.Id == id) {
                    status = this.Status;
                }
            });
            return status;
        }

        var progressStatusDataSource = new kendo.data.DataSource({
            transport: {
                read: {
                    url: "/Home/GetProgressStatus",
                    type: "post"
                }
            }
        });

        function progressStatusEditor(container, options) {
            $('<input data-bind="value:' + options.field + '"/>')
                .appendTo(container)
                .kendoDropDownList({
                    dataTextField: "Status",
                    dataValueField: "Id",
                    optionLabel: "-Chọn-",
                    dataSource: progressStatusDataSource
                });
        }

        var materialProposalCodeDataSource = new kendo.data.DataSource({
            transport: {
                read: {
                    url: "/Home/GetMaterialProposals",
                    type: "post"
                }
            }
        });

        function getMaterialProposalLink(code) {
            var proposalCode = "";
            $.each(materialProposalCodeDataSource._data, function() {
                if (this.MaterialProposalCode == code) {
                    proposalCode = "Mã đề xuất: <a href='/chinh-sua-de-xuat/" + this.MaterialProposalId + "' class='label label-primary'>" + this.MaterialProposalCode + "</a>";
                }
            });
            return proposalCode;
        }

        function getNewCommentIcon(haveNew) {
            return haveNew ? '<img style="float:right; height: 30px;" src="/Images/comment.png">' : '';
        }

        function getMaterialName(id, materialName, file) {
            return file != "" && file != "[]" ? "<a href='/Home/Material/" + id + "' class='label label-success pull-right'><img src='/Images/attachment.png' style='width: 15px;'><img src='/Images/view.png' style='width: 15px;'></a> " + materialName :
                "<a href='/Home/Material/" + id + "' class='label label-success pull-right'><img src='/Images/view.png' style='width: 15px;'></a> " + materialName;
        }

        var commentWindow;

        function showComment(e) {
            e.preventDefault();
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            if (dataItem.Id == 0) {
                alert("Phải lưu trước khi phản hồi!");
                return false;
            }
            var dataItems = this._data;
            var relateIds = [];
            $.each(dataItems, function () {
                relateIds.push(this.Id);
            });
            var hash = "#" + e.delegateTarget.parentElement.id;
            commentWindow = $("#CommentWindow")
                .kendoWindow({
                    title: "Phản hồi",
                    modal: true,
                    visible: false,
                    content: '@Url.Action("CommentPartialView")' + '?id=' + dataItem.Id + '&relateIds=' + relateIds.join(','),
                    width: 600,
                    close: function(e) {
                        $('ul.nav a[href="' + hash + '"]').parent().removeClass("active");
                        $('ul.nav a[href="' + hash + '"]').tab('show');
                    }
                }).data("kendoWindow");
            commentWindow.center().open();
        }

        function implementerUserNameApprovedAssignedGridFilter(element) {
            var implementerUserNames = [];
            var implementerDisplayNames = [];
            var grid = $("#ApprovedAssignedGrid").data("kendoGrid");
            $.each(grid.dataSource._data, function() {
                var displayName = getImplementerDisplayName(this.ImplementerUserName);
                var obj = { Value: this.ImplementerUserName, Text: displayName };
                if ($.inArray(displayName, implementerDisplayNames) == -1 && displayName != "") {
                    implementerUserNames.push(obj);
                    implementerDisplayNames.push(displayName);
                }
            });
            element.kendoDropDownList({
                dataSource: implementerUserNames,
                dataTextField: "Text",
                dataValueField: "Value",
                optionLabel: "-Chọn-",
            });
        }

        function implementerUserNamesApprovedAssignedGridFilter(element) {
            var implementerUserNames = [];
            var implementerDisplayNames = [];
            var grid = $("#ApprovedAssignedGrid").data("kendoGrid");
            $.each(grid.dataSource._data, function () {
                var users = getImplementerUsers(this.ImplementerUserNames);
                $.each(users, function () {
                    var user = this;
                    var obj = { Value: user.userName, Text: user.displayName != "" ? user.displayName : "Chưa phân công" };
                    if ($.inArray(user.displayName, implementerDisplayNames) == -1) {
                        implementerUserNames.push(obj);
                        implementerDisplayNames.push(user.displayName);
                    }
                });
            });
            element.kendoDropDownList({
                dataSource: implementerUserNames,
                dataTextField: "Text",
                dataValueField: "Value",
                optionLabel: "-Chọn-",
            });
        }

        function proposerDepartmentIdApprovedAssignedGridFilter(element) {
            var proposerDepartmentIds = [];
            var proposerDepartmentNames = [];
            var grid = $("#ApprovedAssignedGrid").data("kendoGrid");
            $.each(grid.dataSource._data, function() {
                var departmentName = getImplementerDepartmentName(this.ProposerDepartmentId);
                var obj = { Value: this.ProposerDepartmentId, Text: departmentName != "" ? departmentName : "Chưa phân công" };
                if ($.inArray(departmentName, proposerDepartmentNames) == -1) {
                    proposerDepartmentIds.push(obj);
                    proposerDepartmentNames.push(departmentName);
                }
            });
            element.kendoDropDownList({
                dataSource: proposerDepartmentIds,
                dataTextField: "Text",
                dataValueField: "Value",
                optionLabel: "-Chọn-",
            });
        }

        function implementerDepartmentIdApprovedAssignedGridFilter(element) {
            var implementerDepartmentIds = [];
            var implementerDepartmentNames = [];
            var grid = $("#ApprovedAssignedGrid").data("kendoGrid");
            $.each(grid.dataSource._data, function() {
                var departmentName = getImplementerDepartmentName(this.ImplementerDepartmentId);
                var obj = { Value: this.ImplementerDepartmentId, Text: departmentName != "" ? departmentName : "Chưa phân công" };
                if ($.inArray(departmentName, implementerDepartmentNames) == -1) {
                    implementerDepartmentIds.push(obj);
                    implementerDepartmentNames.push(departmentName);
                }
            });
            element.kendoDropDownList({
                dataSource: implementerDepartmentIds,
                dataTextField: "Text",
                dataValueField: "Value",
                optionLabel: "-Chọn-",
            });
        }

        function implementerDepartmentIdsApprovedAssignedGridFilter(element) {
            var implementerDepartmentIds = [];
            var implementerDepartmentNames = [];
            var grid = $("#ApprovedAssignedGrid").data("kendoGrid");
            $.each(grid.dataSource._data, function () {
                var departments = getImplementerDepartments(this.ImplementerDepartmentIds);
                $.each(departments, function () {
                    var department = this;
                    var obj = { Value: department.id, Text: department.departmentName != "" ? department.departmentName : "Chưa phân công" };
                    if ($.inArray(department.departmentName, implementerDepartmentNames) == -1) {
                        implementerDepartmentIds.push(obj);
                        implementerDepartmentNames.push(department.departmentName);
                    }
                });
            });
            element.kendoDropDownList({
                dataSource: implementerDepartmentIds,
                dataTextField: "Text",
                dataValueField: "Value",
                optionLabel: "-Chọn-",
            });
        }

        function proposerDepartmentIdReceiveAndAwaitingApproveGridFilter(element) {
            var proposerDepartmentIds = [];
            var proposerDepartmentNames = [];
            var grid = $("#ReceiveAndAwaitingApproveGrid").data("kendoGrid");
            $.each(grid.dataSource._data, function() {
                var departmentName = getImplementerDepartmentName(this.ProposerDepartmentId);
                var obj = { Value: this.ProposerDepartmentId, Text: departmentName != "" ? departmentName : "Chưa phân công" };
                if ($.inArray(departmentName, proposerDepartmentNames) == -1) {
                    proposerDepartmentIds.push(obj);
                    proposerDepartmentNames.push(departmentName);
                }
            });
            element.kendoDropDownList({
                dataSource: proposerDepartmentIds,
                dataTextField: "Text",
                dataValueField: "Value",
                optionLabel: "-Chọn-",
            });
        }

        function implementerDepartmentIdReceiveAndAwaitingApproveGridFilter(element) {
            var implementerDepartmentIds = [];
            var implementerDepartmentNames = [];
            var grid = $("#ReceiveAndAwaitingApproveGrid").data("kendoGrid");
            $.each(grid.dataSource._data, function() {
                var departmentName = getImplementerDepartmentName(this.ImplementerDepartmentId);
                var obj = { Value: this.ImplementerDepartmentId, Text: departmentName != "" ? departmentName : "Chưa phân công" };
                if ($.inArray(departmentName, implementerDepartmentNames) == -1) {
                    implementerDepartmentIds.push(obj);
                    implementerDepartmentNames.push(departmentName);
                }
            });
            element.kendoDropDownList({
                dataSource: implementerDepartmentIds,
                dataTextField: "Text",
                dataValueField: "Value",
                optionLabel: "-Chọn-",
            });
        }

        function implementerDepartmentIdsReceiveAndAwaitingApproveGridFilter(element) {
            var implementerDepartmentIds = [];
            var implementerDepartmentNames = [];
            var grid = $("#ReceiveAndAwaitingApproveGrid").data("kendoGrid");
            $.each(grid.dataSource._data, function() {
                var departments = getImplementerDepartments(this.ImplementerDepartmentIds);
                $.each(departments, function () {
                    var department = this;
                    var obj = { Value: department.id, Text: department.departmentName != "" ? department.departmentName : "Chưa phân công" };
                    if ($.inArray(department.departmentName, implementerDepartmentNames) == -1) {
                        implementerDepartmentIds.push(obj);
                        implementerDepartmentNames.push(department.departmentName);
                    }
                });
            });
            element.kendoDropDownList({
                dataSource: implementerDepartmentIds,
                dataTextField: "Text",
                dataValueField: "Value",
                optionLabel: "-Chọn-",
            });
        }

        function implementerUserNameAssignedFinishedGridFilter(element) {
            var implementerUserNames = [];
            var implementerDisplayNames = [];
            var grid = $("#AssignedFinishedGrid").data("kendoGrid");
            $.each(grid.dataSource._data, function() {
                var displayName = getImplementerDisplayName(this.ImplementerUserName);
                var obj = { Value: this.ImplementerUserName, Text: displayName };
                if ($.inArray(displayName, implementerDisplayNames) == -1 && displayName != "") {
                    implementerUserNames.push(obj);
                    implementerDisplayNames.push(displayName);
                }
            });
            element.kendoDropDownList({
                dataSource: implementerUserNames,
                dataTextField: "Text",
                dataValueField: "Value",
                optionLabel: "-Chọn-",
            });
        }

        function implementerUserNamesAssignedFinishedGridFilter(element) {
            var implementerUserNames = [];
            var implementerDisplayNames = [];
            var grid = $("#AssignedFinishedGrid").data("kendoGrid");
            $.each(grid.dataSource._data, function () {
                var users = getImplementerUsers(this.ImplementerUserNames);
                $.each(users, function () {
                    var user = this;
                    var obj = { Value: user.userName, Text: user.displayName != "" ? user.displayName : "Chưa phân công" };
                    if ($.inArray(user.displayName, implementerDisplayNames) == -1) {
                        implementerUserNames.push(obj);
                        implementerDisplayNames.push(user.displayName);
                    }
                });
            });
            element.kendoDropDownList({
                dataSource: implementerUserNames,
                dataTextField: "Text",
                dataValueField: "Value",
                optionLabel: "-Chọn-",
            });
        }

        function proposerDepartmentIdAssignedFinishedGridFilter(element) {
            var proposerDepartmentIds = [];
            var proposerDepartmentNames = [];
            var grid = $("#AssignedFinishedGrid").data("kendoGrid");
            $.each(grid.dataSource._data, function() {
                var departmentName = getImplementerDepartmentName(this.ProposerDepartmentId);
                var obj = { Value: this.ProposerDepartmentId, Text: departmentName != "" ? departmentName : "Chưa phân công" };
                if ($.inArray(departmentName, proposerDepartmentNames) == -1) {
                    proposerDepartmentIds.push(obj);
                    proposerDepartmentNames.push(departmentName);
                }
            });
            element.kendoDropDownList({
                dataSource: proposerDepartmentIds,
                dataTextField: "Text",
                dataValueField: "Value",
                optionLabel: "-Chọn-",
            });
        }

        function implementerDepartmentIdAssignedFinishedGridFilter(element) {
            var implementerDepartmentIds = [];
            var implementerDepartmentNames = [];
            var grid = $("#AssignedFinishedGrid").data("kendoGrid");
            $.each(grid.dataSource._data, function() {
                var departmentName = getImplementerDepartmentName(this.ImplementerDepartmentId);
                var obj = { Value: this.ImplementerDepartmentId, Text: departmentName != "" ? departmentName : "Chưa phân công" };
                if ($.inArray(departmentName, implementerDepartmentNames) == -1) {
                    implementerDepartmentIds.push(obj);
                    implementerDepartmentNames.push(departmentName);
                }
            });
            element.kendoDropDownList({
                dataSource: implementerDepartmentIds,
                dataTextField: "Text",
                dataValueField: "Value",
                optionLabel: "-Chọn-",
            });
        }

        function implementerDepartmentIdsAssignedFinishedGridFilter(element) {
            var implementerDepartmentIds = [];
            var implementerDepartmentNames = [];
            var grid = $("#AssignedFinishedGrid").data("kendoGrid");
            $.each(grid.dataSource._data, function () {
                var departments = getImplementerDepartments(this.ImplementerDepartmentIds);
                $.each(departments, function () {
                    var department = this;
                    var obj = { Value: department.id, Text: department.departmentName != "" ? department.departmentName : "Chưa phân công" };
                    if ($.inArray(department.departmentName, implementerDepartmentNames) == -1) {
                        implementerDepartmentIds.push(obj);
                        implementerDepartmentNames.push(department.departmentName);
                    }
                });
            });
            element.kendoDropDownList({
                dataSource: implementerDepartmentIds,
                dataTextField: "Text",
                dataValueField: "Value",
                optionLabel: "-Chọn-",
            });
        }

        function progressStatusIdApprovedAssignedGridFilter(element) {
            var progressStatusIds = [];
            var statuses = [];
            var grid = $("#ApprovedAssignedGrid").data("kendoGrid");
            $.each(grid.dataSource._data, function() {
                var status = getProgressStatus(this.ProgressStatusId);
                var obj = { Value: this.ProgressStatusId, Text: status != "" ? status : "Chưa có trạng thái" };
                if ($.inArray(status, statuses) == -1) {
                    progressStatusIds.push(obj);
                    statuses.push(status);
                }
            });
            element.kendoDropDownList({
                dataSource: progressStatusIds,
                dataTextField: "Text",
                dataValueField: "Value",
                optionLabel: "-Chọn-",
            });
        }

        function progressStatusIdAssignedFinishedGridFilter(element) {
            var progressStatusIds = [];
            var statuses = [];
            var grid = $("#AssignedFinishedGrid").data("kendoGrid");
            $.each(grid.dataSource._data, function() {
                var status = getProgressStatus(this.ProgressStatusId);
                var obj = { Value: this.ProgressStatusId, Text: status != "" ? status : "Chưa có trạng thái" };
                if ($.inArray(status, statuses) == -1) {
                    progressStatusIds.push(obj);
                    statuses.push(status);
                }
            });
            element.kendoDropDownList({
                dataSource: progressStatusIds,
                dataTextField: "Text",
                dataValueField: "Value",
                optionLabel: "-Chọn-",
            });
        }
    </script>

}