@{
    ViewBag.Title = "GeneralManagerPage";
}
<div id="UploadFileWindow"></div>
<div id="CommentWindow"></div>
<div class="row">&nbsp;</div>
<div class="row">
    <!-- Nav tabs -->
    <ul class="nav nav-tabs">
        <li class="active"><a href="#ReceiveAndAwaitingApprove" data-toggle="tab">Duyệt đề nghị cấp</a></li>
        <li><a href="#ApprovedAssigned" data-toggle="tab">Đã duyệt và phân công</a></li>
    </ul>

    <!-- Tab panes -->
    <div class="tab-content">
        <div class="tab-pane active" id="ReceiveAndAwaitingApprove">
            <div class="row">&nbsp;</div>
            <div id="ReceiveAndAwaitingApproveGrid"></div>
        </div>
        <div class="tab-pane" id="ApprovedAssigned">
            <div class="row">&nbsp;</div>
            <div id="ApprovedAssignedGrid"></div>
        </div>
    </div>
</div>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script id="proposalCodeTemplate" type="text/x-kendo-tmpl">
        <a href="/chinh-sua-de-xuat/#= Id #" class="label label-primary">#= ProposalCode #</a>
    </script>
    <script id="approveStatusTemplate" type="text/x-kendo-tmpl">
        # if (Approved) { #
        <span class="label label-success">
            Đã duyệt
        </span>
        # } else {#
        <span class="label label-warning">
            Chưa duyệt
        </span>
        # } #
    </script>
    <script type="text/javascript">
        $(document).ready(function () {
            var hash = window.location.hash;
            hash && $('ul.nav a[href="' + hash + '"]').tab('show');
            $('a[data-toggle="tab"]').on('shown.bs.tab', function (e) {
                $(e.target.hash + "Grid").data("kendoGrid").dataSource.read();
            });
            implementerDepartmentDataSource.read();
            implementerUserDataSource.read();
            progressStatusDataSource.read();
            //----------Tab 1-----------//
            var receiveAndAwaitingApproveDataSource = new kendo.data.DataSource({
                transport: {
                    read: {
                        url: "/Home/GetMaterialProposals",
                        type: "post"
                    },
                    update: {
                        url: "/Home/AddOrUpdateMaterial",
                        type: "post"
                    },
                    destroy: {
                        url: "/Home/DeleteMaterial",
                        type: "post",
                    },
                    create: {
                        url: "/Home/AddOrUpdateMaterial",
                        type: "post"
                    },
                    parameterMap: function (options, operation) {
                        if (operation !== "read" && options.models) {
                            return {
                                materials: kendo.stringify(options.models),
                                materialProposalId: $("#Id").val()
                            };
                        } else {
                            return {
                                pageNumber: options.page,
                                pageSize: options.pageSize,
                                command: "ReceiveAndAwaitingApprove"
                            };
                        }
                    }
                },
                batch: true,
                pageSize: 10,
                //serverPaging: true,
                schema: {
                    model: {
                        id: "Id",
                        fields: {
                            Id: { editable: false, nullable: false, defaultValue: 0 },
                            ProposalCode: { type: "string", validation: { required: true } },
                            CreatedDate: { type: "date", format: "dd/MM/yyyy", validation: { required: true } },
                            MinDeadline: { type: "date", format: "dd/MM/yyyy", validation: { required: true } },
                            Approved: { type: "boolean" }
                        }
                    },
                    total: "total",
                    data: "data"
                }
            });

            $("#ReceiveAndAwaitingApproveGrid").kendoGrid({
                autoBind: hash == "",
                dataSource: receiveAndAwaitingApproveDataSource,
                navigatable: true,
                pageable: true,
                sortable: true,
                reorderable: true,
                resizable: true,
                filterable: true,
                groupable: {
                    messages: {
                        empty: "Kéo thả tên cột vào đây để xem theo nhóm."
                    }
                },
                //toolbar: [{ name: "create", text: "Thêm" }],
                columns: [
                    { field: "ProposalCode", title: "Mã đề xuất", template: "<a href='/chinh-sua-de-xuat/#= Id #' class='label label-primary'>#= ProposalCode #</a> #= getNewCommentIcon(HaveNewComment) #" },
                    { field: "CreatedDate", format: '{0:dd/MM/yyyy}', title: "Ngày lập bảng" },
                    { field: "MinDeadline", format: '{0:dd/MM/yyyy}', title: "Ngày nhỏ nhất" },
                    { field: "ProposerDepartmentId", title: "Đơn vị đề nghị", editor: implementerDepartmentEditor, template: "#= getImplementerDepartmentName(ProposerDepartmentId) #", groupHeaderTemplate: "Đơn vị đề nghị: #= getImplementerDepartmentName(value) #" },
                    { field: "Approved", title: "Duyệt", template: $("#approveStatusTemplate").html() }
                ],
                editable: false,
                dataBound: function () {
                    var dataView = this.dataSource.view();
                    for (var i = 0; i < dataView.length; i++) {
                        if (kendo.parseDate(dataView[i].MinDeadline, "dd/MM/yyyy") <= new Date()) {
                            $("#ReceiveAndAwaitingApproveGrid tbody").find("tr[data-uid=" + dataView[i].uid + "]").addClass("btn-danger active");
                        } else if (kendo.parseDate(dataView[i].MinDeadline, "dd/MM/yyyy") <= new Date().addDays(3)) {
                            $("#ReceiveAndAwaitingApproveGrid tbody").find("tr[data-uid=" + dataView[i].uid + "]").addClass("btn-warning active");
                        } else if (kendo.parseDate(dataView[i].MinDeadline, "dd/MM/yyyy") <= new Date().addDays(3)) {
                            $("#ReceiveAndAwaitingApproveGrid tbody").find("tr[data-uid=" + dataView[i].uid + "]").addClass("btn-primary active");
                        }
                    }
                }
            });

            //----------Tab 2-----------//
            var approvedAssignedDataSource = new kendo.data.DataSource({
                transport: {
                    read: {
                        url: "/Home/GetMaterials",
                        type: "post"
                    },
                    update: {
                        url: "/Home/AddOrUpdateMaterial",
                        type: "post"
                    },
                    destroy: {
                        url: "/Home/DeleteMaterial",
                        type: "post",
                    },
                    create: {
                        url: "/Home/AddOrUpdateMaterial",
                        type: "post"
                    },
                    parameterMap: function (options, operation) {
                        if (operation !== "read" && options.models) {
                            return {
                                materials: kendo.stringify(options.models)
                            };
                        } else {
                            return {
                                pageNumber: options.page,
                                pageSize: options.pageSize,
                                command: "ApprovedAssigned"
                            };
                        }
                    }
                },
                batch: true,
                pageSize: 10,
                //serverPaging: true,
                schema: {
                    model: {
                        id: "Id",
                        fields: {
                            Id: { editable: false, nullable: false, defaultValue: 0 },
                            MaterialProposalCode: { editable: false, type: "string", validation: { required: true } },
                            MaterialName: { type: "string", validation: { required: true } },
                            Description: { type: "string" },
                            Quantity: { type: "number" },
                            InventoryQuantity: { type: "number" },
                            Unit: { type: "string", validation: { required: true } },
                            Used: { type: "boolean" },
                            UsingPurpose: { type: "string" },
                            Deadline: { type: "date", format: "dd/MM/yyyy", validation: { required: true } },
                            StartDate: { type: "date", format: "dd/MM/yyyy", validation: { required: true } },
                            ApproveDate: { type: "date", format: "dd/MM/yyyy", validation: { required: true } },
                            FinishDate: { editable: false, type: "date", format: "dd/MM/yyyy", validation: { required: true } },
                            DeliveryDate: { editable: false, type: "date", format: "dd/MM/yyyy", validation: { required: true } },
                            ProgressStatusId: { type: "number" },
                            Note: { type: "string" },
                            ImplementerDepartmentId: { type: "number" },
                            ImplementerUserName: { type: "string" },
                            LastProposalDeparmentComment: { type: "string", editable: false },
                            LastImplementDepartmentComment: { type: "string", editable: false },
                            LastGeneralManagerComment: { type: "string", editable: false },
                            ApproveStatus: { type: "number", editable: false },
                            Finished: { type: "boolean", editable: false }
                        }
                    },
                    total: "total",
                    data: "data"
                }
            });

            $("#ApprovedAssignedGrid").kendoGrid({
                autoBind: false,
                dataSource: approvedAssignedDataSource,
                navigatable: true,
                pageable: true,
                sortable: true,
                reorderable: true,
                resizable: true,
                filterable: true,
                groupable: {
                    messages: {
                        empty: "Kéo thả tên cột vào đây để xem theo nhóm."
                    }
                },
                //toolbar: [{ name: "create", text: "Thêm" }],
                columns: [
                    { field: "MaterialProposalCode", title: "Mã đề xuất", template: "<a href='/chinh-sua-de-xuat/#= MaterialProposalId #' class='label label-primary'>#= MaterialProposalCode #</a>", width: 100 },
                    { field: "MaterialName", template: "<a href='/Home/Material/#= Id #' class='label label-success pull-right'>Xem</a> #= MaterialName #", title: "Tên vật tư", width: 200 },
                    { field: "Description", title: "Mô tả", editor: textareaEditor, width: 200 },
                    { field: "ImplementerDepartmentId", title: "Đơn vị thực hiện", editor: implementerDepartmentEditor, template: "#= getImplementerDepartmentName(ImplementerDepartmentId) #", groupHeaderTemplate: "Đơn vị thực hiện: #= getImplementerDepartmentName(value) #", width: 150 },
                    { field: "ProposerDepartmentId", title: "Đơn vị đề nghị", editor: implementerDepartmentEditor, template: "#= getImplementerDepartmentName(ProposerDepartmentId) #", groupHeaderTemplate: "Đơn vị đề nghị: #= getImplementerDepartmentName(value) #", width: 150 },
                    { field: "ImplementerUserName", title: "Người thực hiện", editor: implementerUserEditor, template: "#= getImplementerDisplayName(ImplementerUserName) #", groupHeaderTemplate: "Người thực hiện: #= getImplementerDisplayName(value) #", width: 150 },
                    { field: "StartDate", format: '{0:dd/MM/yyyy}', title: "Ngày giao việc", width: 150 },
                    { field: "FinishDate", format: '{0:dd/MM/yyyy}', title: "Ngày hoàn tất", width: 150 },
                    { field: "ProgressStatusId", title: "Trạng thái tiến độ", editor: progressStatusEditor, template: "#= getProgressStatus(ProgressStatusId) #", groupHeaderTemplate: "Trạng thái tiến độ: #= getProgressStatus(value) #", width: 200 },
                    { field: "LastProposalDeparmentComment", title: "Đơn vị đề xuất phản hồi", width: 200 },
                    { field: "LastImplementDepartmentComment", title: "Đơn vị thực hiện phản hồi", width: 200 },
                    { field: "LastGeneralManagerComment", title: "Chỉ đạo của tổng giám đốc", width: 200 },
                    { command: [{ text: "Phản hồi", click: showComment }], title: " ", width: "110px" }
                    ],
                editable: false,
                dataBound: function () {
                    var dataView = this.dataSource.view();
                    for (var i = 0; i < dataView.length; i++) {
                        if (kendo.parseDate(dataView[i].FinishDate, "dd/MM/yyyy") <= new Date()) {
                            $("#ApprovedAssignedGrid tbody").find("tr[data-uid=" + dataView[i].uid + "]").addClass("btn-danger active");
                        } else if (kendo.parseDate(dataView[i].FinishDate, "dd/MM/yyyy") <= new Date().addDays(3)) {
                            $("#ApprovedAssignedGrid tbody").find("tr[data-uid=" + dataView[i].uid + "]").addClass("btn-warning active");
                        } else {

                        }
                    }
                }
            });
        });
        Date.prototype.addDays = function (days) {
            this.setDate(this.getDate() + days);
            return this;
        };
        var textareaEditor = function (container, options) {
            $('<textarea class="k-input k-textbox" data-bind="value:' + options.field + '" />')
                .appendTo(container);
        };

        function getImplementerDepartmentName(id) {
            var departmentName = "";
            $.each(implementerDepartmentDataSource._data, function () {
                if (this.Id == id) {
                    departmentName = this.DepartmentName;
                }
            });
            return departmentName;
        }

        var implementerDepartmentDataSource = new kendo.data.DataSource({
            transport: {
                read: {
                    url: "/Home/GetDepartment",
                    type: "post"
                }
            }
        });

        function implementerDepartmentEditor(container, options) {
            $('<input required data-bind="value:' + options.field + '"/>')
                .appendTo(container)
                .kendoDropDownList({
                    dataTextField: "DepartmentName",
                    dataValueField: "Id",
                    optionLabel: "-Chọn-",
                    dataSource: implementerDepartmentDataSource
                });
        }

        function getImplementerDisplayName(userName) {
            var displayName = "";
            $.each(implementerUserDataSource._data, function () {
                if (this.UserName == userName) {
                    displayName = this.DisplayName;
                }
            });
            return displayName;
        }

        var implementerUserDataSource = new kendo.data.DataSource({
            transport: {
                read: {
                    url: "/Home/GetAllUser",
                    type: "post"
                }
            }
        });

        function implementerUserEditor(container, options) {
            $('<input required data-bind="value:' + options.field + '"/>')
                .appendTo(container)
                .kendoDropDownList({
                    dataTextField: "DisplayName",
                    dataValueField: "UserName",
                    optionLabel: "-Chọn-",
                    dataSource: implementerUserDataSource
                });
        }

        function getProgressStatus(id) {
            var status = "";
            $.each(progressStatusDataSource._data, function () {
                if (this.Id == id) {
                    status = this.Status;
                }
            });
            return status;
        }

        var progressStatusDataSource = new kendo.data.DataSource({
            transport: {
                read: {
                    url: "/Home/GetProgressStatus",
                    type: "post"
                }
            }
        });

        function progressStatusEditor(container, options) {
            $('<input required data-bind="value:' + options.field + '"/>')
                .appendTo(container)
                .kendoDropDownList({
                    dataTextField: "Status",
                    dataValueField: "Id",
                    optionLabel: "-Chọn-",
                    dataSource: progressStatusDataSource
                });
        }

        var materialProposalCodeDataSource = new kendo.data.DataSource({
            transport: {
                read: {
                    url: "/Home/GetMaterialProposals",
                    type: "post"
                }
            }
        });

        function getMaterialProposalLink(code) {
            var proposalCode = "";
            $.each(materialProposalCodeDataSource._data, function () {
                if (this.MaterialProposalCode == code) {
                    proposalCode = "Mã đề xuất: <a href='/chinh-sua-de-xuat/" + this.MaterialProposalId + "' class='label label-primary'>" + this.MaterialProposalCode + "</a>";
                }
            });
            return proposalCode;
        }
        
        function getNewCommentIcon(haveNew) {
            return haveNew ? '<img style="float:right; height: 30px;" src="/Images/comment.png">' : '';
        }

        var commentWindow;

        function showComment(e) {
            e.preventDefault();
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            if (dataItem.Id == 0) {
                alert("Phải lưu trước khi phản hồi!");
                return false;
            }
            commentWindow = $("#CommentWindow")
                .kendoWindow({
                    title: "Phản hồi",
                    modal: true,
                    visible: false,
                    resizable: false,
                    content: '@Url.Action("CommentPartialView")' + '?id=' + dataItem.Id,
                    width: 600
                }).data("kendoWindow");
            commentWindow.center().open();
        }
    </script>

}